# coding: utf-8

"""
    Pesaway Pesamoni API Documentation

"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'token': 'str',
        'description': 'str',
        'mobile': 'str',
        'statuscode': 'str',
        'transaction_type': 'str'
    }

    attribute_map = {
        'status': 'status',
        'token': 'token',
        'description': 'description',
        'mobile': 'mobile',
        'statuscode': 'statuscode',
        'transaction_type': 'transaction_type'
    }

    def __init__(self, status=None, token=None, description=None, mobile=None, statuscode=None, transaction_type=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._token = None
        self._description = None
        self._mobile = None
        self._statuscode = None
        self._transaction_type = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if token is not None:
            self.token = token
        if description is not None:
            self.description = description
        if mobile is not None:
            self.mobile = mobile
        if statuscode is not None:
            self.statuscode = statuscode
        if transaction_type is not None:
            self.transaction_type = transaction_type

    @property
    def status(self):
        """Gets the status of this InlineResponse200.  # noqa: E501


        :return: The status of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200.


        :param status: The status of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def token(self):
        """Gets the token of this InlineResponse200.  # noqa: E501


        :return: The token of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this InlineResponse200.


        :param token: The token of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def description(self):
        """Gets the description of this InlineResponse200.  # noqa: E501


        :return: The description of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200.


        :param description: The description of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mobile(self):
        """Gets the mobile of this InlineResponse200.  # noqa: E501


        :return: The mobile of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this InlineResponse200.


        :param mobile: The mobile of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def statuscode(self):
        """Gets the statuscode of this InlineResponse200.  # noqa: E501


        :return: The statuscode of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._statuscode

    @statuscode.setter
    def statuscode(self, statuscode):
        """Sets the statuscode of this InlineResponse200.


        :param statuscode: The statuscode of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._statuscode = statuscode

    @property
    def transaction_type(self):
        """Gets the transaction_type of this InlineResponse200.  # noqa: E501


        :return: The transaction_type of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this InlineResponse200.


        :param transaction_type: The transaction_type of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._transaction_type = transaction_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
